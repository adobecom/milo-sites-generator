{"version":3,"file":"sidebar.js","sources":["../../src/blocks/sidebar/sidebar.js"],"sourcesContent":["import { fetchSearch } from '../../scripts/scripts.js';\nimport 'nsw-design-system/src/components/side-nav/_side-nav.scss';\nimport './sidebar.scss';\nimport { fetchPlaceholders } from '../../scripts/aem.js';\nimport { IS_AUTHOR_MODE } from '../../scripts/constants.js';\n\nlet IS_CHILD_PAGE = false;\n\nlet CURRENT_PATH = window.location.pathname;\n\nfunction getPageTitle(indexPage) {\n  return indexPage.title || indexPage.navTitle;\n}\n\nfunction buildNavMenu(pages, basePath) {\n  const activePath = window.location.pathname;\n\n  // Extract segments for base and active paths\n  const baseSegments = basePath.split('/').filter(Boolean);\n  const activeSegments = activePath.split('/').filter(Boolean);\n\n  const isBasePage = activeSegments.length === baseSegments.length;\n  const isChildPage = activeSegments.length > baseSegments.length;\n\n  let menu = {};\n\n  if (isBasePage) {\n    // Case 1: User is on the base page\n    const topLevelPages = pages.filter(({ path }) => path.split('/').filter(Boolean).length === 1);\n    const basePageEntry = pages.find(({ path }) => path === basePath);\n    const baseChildren = pages.filter(({ path }) => {\n      const childSegments = path.split('/').filter(Boolean);\n      return (\n        childSegments.length === baseSegments.length + 1\n        && path.startsWith(basePath)\n        && path !== basePath\n      );\n    });\n\n    // Add top-level pages\n    topLevelPages.forEach((page) => {\n      const { path } = page;\n      const navTitle = getPageTitle(page);\n      menu[navTitle] = {\n        path,\n        title: navTitle,\n        children: {},\n        isActive: activePath.startsWith(path),\n      };\n    });\n\n    // Add base page and its direct children\n    if (basePageEntry) {\n      baseChildren.forEach((page) => {\n        const { path } = page;\n        const navTitle = getPageTitle(page);\n        menu[getPageTitle(basePageEntry)].children[navTitle] = {\n          path,\n          title: navTitle,\n          children: {},\n          isActive: activePath.startsWith(path),\n        };\n      });\n    }\n  } else if (isChildPage) {\n    // Case 2: User is inside a child/sub-child of the base page\n    menu = {};\n\n    // Get all children and sub-children of the base page\n    const allChildren = pages.filter(({ path }) => path.startsWith(basePath) && path !== basePath);\n\n    allChildren.forEach((page) => {\n      const { path } = page;\n      const navTitle = getPageTitle(page);\n      const parts = path.replace(basePath, '').split('/').filter(Boolean);\n      let currentLevel = menu;\n\n      parts.forEach((part) => {\n        if (!currentLevel[part]) {\n          currentLevel[part] = {\n            path,\n            title: navTitle || part,\n            children: {},\n            isActive: activePath.startsWith(path),\n          };\n        }\n        currentLevel = currentLevel[part].children;\n      });\n    });\n  }\n\n  return menu;\n}\n\nfunction isAncestorCheck(children, currentPath) {\n  return Object.values(children).some((item) => {\n    const itemPathArr = item.path.split('/');\n    let ancestorPath = item.path;\n\n    if (itemPathArr.length > 2) {\n      ancestorPath = itemPathArr.slice(1, 3).join('/');\n    }\n    return currentPath.includes(ancestorPath);\n  });\n}\n\nfunction createNavElement(menu, parentElement) {\n  const ul = document.createElement('ul');\n\n  Object.values(menu).forEach(({ path, title, children }) => {\n    const hasChildren = children && Object.keys(children).length;\n    const li = document.createElement('li');\n    const a = Object.assign(document.createElement('a'), { href: path, textContent: title });\n\n    // Highlight the current active page\n    if (CURRENT_PATH === path) a.classList.add('current');\n\n    // Expand the menu if the current page is under this path\n    if (hasChildren && CURRENT_PATH.startsWith(path)) li.classList.add('active');\n\n    li.appendChild(a);\n\n    // If the menu item has children, recursively create sub-navigation\n    if (hasChildren) {\n      const shouldRenderChildren = !IS_CHILD_PAGE || isAncestorCheck(children, CURRENT_PATH);\n      if (shouldRenderChildren) {\n        createNavElement(children, li);\n      }\n    }\n\n    ul.appendChild(li);\n  });\n\n  parentElement.appendChild(ul);\n}\n\nexport default async function decorate(block) {\n  const allPages = await fetchSearch(); // Fetch dynamic navigation data\n\n  if (IS_AUTHOR_MODE) {\n    const response = await fetchPlaceholders();\n    const baseSiteUrl = response?.basesiteurl;\n    if (baseSiteUrl) {\n      CURRENT_PATH = CURRENT_PATH.split(baseSiteUrl)?.[1];\n    } else {\n      const getCurrentPath = (inputPath) => {\n        const validBasePaths = allPages\n          .map((item) => item.path)\n          .filter((path) => path.split('/').length === 2);\n        // Remove `.html` extension from the input path\n        const cleanedPath = inputPath.replace(/\\.html$/, '');\n\n        // Split the cleaned path into parts using '/'\n        const pathParts = cleanedPath.split('/');\n\n        // Iterate through the path segments to find the first matching base path\n        for (let i = 1; i < pathParts.length; i += 1) {\n          const potentialBasePath = `/${pathParts[i]}`;\n\n          // If a valid base path is found, return everything from that point onward\n          if (validBasePaths.includes(potentialBasePath)) {\n            return cleanedPath.substring(cleanedPath.indexOf(potentialBasePath));\n          }\n        }\n\n        return '';\n      };\n      CURRENT_PATH = getCurrentPath(CURRENT_PATH);\n    }\n  }\n  const basePath = `/${CURRENT_PATH.split('/').filter(Boolean)[0] || ''}`; // Extract base path\n\n  // Create the main navigation container\n  const navContainer = document.createElement('nav');\n  navContainer.className = 'nsw-side-nav';\n  navContainer.setAttribute('aria-labelledby', 'dynamic-nav');\n\n  const isBasePage = CURRENT_PATH === basePath;\n\n  // Case 2: Show Header only when the user is inside a child page\n  if (!isBasePage) {\n    const header = document.createElement('div');\n    header.className = 'nsw-side-nav__header';\n    header.id = 'dynamic-nav';\n\n    const baseItem = allPages.find(({ path }) => path === basePath);\n    if (baseItem) {\n      const baseLink = Object.assign(document.createElement('a'), {\n        href: baseItem.path,\n        textContent: getPageTitle(baseItem),\n      });\n\n      const backIcon = document.createElement('span');\n      backIcon.className = 'material-icons nsw-material-icons';\n      backIcon.setAttribute('focusable', 'false');\n      backIcon.setAttribute('aria-hidden', 'true');\n      backIcon.textContent = 'west';\n\n      baseLink.prepend(backIcon); // Insert backIcon inside the anchor\n      header.appendChild(baseLink);\n    }\n\n    navContainer.appendChild(header);\n  }\n\n  // Build navigation menu based on current page\n  let menu;\n\n  if (isBasePage) {\n    // Case 1: When base page is the current page\n    menu = buildNavMenu(allPages, basePath);\n\n    // Ensure Home (`'/'`) appears at the top (as a sibling)\n    const homeItem = allPages.find(({ path }) => path === '/');\n    if (homeItem) {\n      createNavElement({ Home: { path: '/', title: 'Home', children: {} } }, navContainer);\n    }\n\n    createNavElement(menu, navContainer);\n  } else {\n    // Case 2: When inside a child page\n    IS_CHILD_PAGE = true;\n    menu = buildNavMenu(allPages, basePath);\n    createNavElement(menu, navContainer);\n  }\n\n  // Append navigation to block\n  block.textContent = '';\n  block.appendChild(navContainer);\n}\n"],"names":["IS_CHILD_PAGE","CURRENT_PATH","getPageTitle","indexPage","buildNavMenu","pages","basePath","activePath","baseSegments","activeSegments","isBasePage","isChildPage","menu","topLevelPages","path","basePageEntry","baseChildren","page","navTitle","parts","currentLevel","part","isAncestorCheck","children","currentPath","item","itemPathArr","ancestorPath","createNavElement","parentElement","ul","title","hasChildren","li","a","decorate","block","allPages","fetchSearch","IS_AUTHOR_MODE","response","fetchPlaceholders","baseSiteUrl","_a","inputPath","validBasePaths","cleanedPath","pathParts","i","potentialBasePath","navContainer","header","baseItem","baseLink","backIcon"],"mappings":"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"}