{"version":3,"file":"breadcrumb.js","sources":["../../node_modules/nsw-design-system/src/components/breadcrumbs/breadcrumbs.js","../../src/blocks/breadcrumb/breadcrumb.js"],"sourcesContent":["class Breadcrumbs {\n  constructor(element) {\n    this.element = element\n    this.allBreadcrumbs = this.element.querySelector('.nsw-breadcrumbs ol')\n    this.secondBreadcrumb = this.element.querySelector('.js-breadcrumbs li:nth-child(2)')\n    this.condition = false\n  }\n\n  init() {\n    if (this.allBreadcrumbs.children.length > 3) {\n      this.createToggle()\n    }\n  }\n\n  createToggle() {\n    const toggle = this.constructor.createElement('li', ['nsw-breadcrumbs__show-more-toggle'])\n    toggle.innerHTML = '<button aria-label=\"Show more breadcrumbs\" class=\"nsw-breadcrumbs__toggle-button\" type=\"button\">â€¦</button>'\n    toggle.addEventListener('click', () => {\n      this.allBreadcrumbs.classList.toggle('nsw-breadcrumbs__show-all')\n    })\n\n    this.allBreadcrumbs.insertBefore(toggle, this.secondBreadcrumb)\n  }\n\n  static createElement(tag, classes = [], attributes = {}) {\n    const element = document.createElement(tag)\n    if (classes.length > 0) {\n      element.classList.add(...classes)\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      element.setAttribute(key, value)\n    })\n\n    return element\n  }\n}\n\nexport default Breadcrumbs\n","import Breadcrumbs from 'nsw-design-system/src/components/breadcrumbs/breadcrumbs.js';\nimport { fetchSearch } from '../../scripts/scripts.js';\nimport 'nsw-design-system/src/components/breadcrumbs/_breadcrumbs.scss';\nimport './breadcrumb.scss';\n\nexport default async function decorate(block) {\n  // Fetch all pages (e.g. pages with their paths and titles)\n  const allSitePages = await fetchSearch();\n\n  // Remove leading/trailing slashes from pathname and split into segments.\n  // For example, '/hello/world/' becomes ['hello', 'world']\n  const cleanedPath = window.location.pathname.replace('^/(.*?)/?$', '$1');\n  const pathSegments = cleanedPath.split('/');\n  const { origin } = window.location;\n\n  // Initialize variables for building breadcrumb links.\n  let accumulatedPath = '';\n  let segmentIndex = 1;\n  const breadcrumbList = document.createElement('ol');\n\n  pathSegments.forEach((segment) => {\n    accumulatedPath += segment;\n    const listItem = document.createElement('li');\n\n    // Special handling of the homepage\n    if (!accumulatedPath) {\n      listItem.innerHTML = `<a href='${origin}' title='Home'>Home</a>`;\n      breadcrumbList.append(listItem);\n    } else {\n      const matchingPages = allSitePages.filter((item) => item.path === accumulatedPath);\n\n      if (matchingPages && matchingPages.length === 1) {\n        segmentIndex += 1;\n        const pageInfo = matchingPages[0];\n        // Use navTitle if available, otherwise fall back to the title.\n        const label = pageInfo.navTitle || pageInfo.title;\n        const linkElement = document.createElement('a');\n\n        // Set up the link attributes and text.\n        linkElement.className = 'breadcrumb';\n        linkElement.title = label;\n        linkElement.textContent = label;\n\n        // If this is the last segment, mark it as the current page.\n        if (pathSegments.length === segmentIndex) {\n          linkElement.classList = 'current';\n          linkElement.setAttribute('aria-current', 'page');\n        } else {\n          linkElement.href = origin + accumulatedPath;\n        }\n\n        // Append the link to the list item.\n        listItem.append(linkElement);\n        breadcrumbList.append(listItem);\n      }\n    }\n\n    // Append a trailing slash for the next iteration's path accumulation.\n    accumulatedPath += '/';\n  });\n\n  // Create a <nav> element to wrap the breadcrumbs, for accessibility and styling.\n  const navEle = document.createElement('nav');\n  navEle.className = 'nsw-breadcrumbs js-breadcrumbs';\n  navEle.setAttribute('aria-label', 'Breadcrumbs');\n  navEle.appendChild(breadcrumbList);\n  block.innerHTML = navEle.outerHTML;\n  const breadcrumbs = block.querySelectorAll('.js-breadcrumbs');\n  if (breadcrumbs) {\n    breadcrumbs.forEach((element) => {\n      new Breadcrumbs(element).init();\n    });\n  }\n}\n"],"names":["Breadcrumbs","element","toggle","tag","classes","attributes","key","value","decorate","block","allSitePages","fetchSearch","pathSegments","origin","accumulatedPath","segmentIndex","breadcrumbList","segment","listItem","matchingPages","item","pageInfo","label","linkElement","navEle","breadcrumbs"],"mappings":"4EAAA,MAAMA,CAAY,CAChB,YAAYC,EAAS,CACnB,KAAK,QAAUA,EACf,KAAK,eAAiB,KAAK,QAAQ,cAAc,qBAAqB,EACtE,KAAK,iBAAmB,KAAK,QAAQ,cAAc,iCAAiC,EACpF,KAAK,UAAY,EACrB,CAEE,MAAO,CACD,KAAK,eAAe,SAAS,OAAS,GACxC,KAAK,aAAY,CAEvB,CAEE,cAAe,CACb,MAAMC,EAAS,KAAK,YAAY,cAAc,KAAM,CAAC,mCAAmC,CAAC,EACzFA,EAAO,UAAY,6GACnBA,EAAO,iBAAiB,QAAS,IAAM,CACrC,KAAK,eAAe,UAAU,OAAO,2BAA2B,CACjE,CAAA,EAED,KAAK,eAAe,aAAaA,EAAQ,KAAK,gBAAgB,CAClE,CAEE,OAAO,cAAcC,EAAKC,EAAU,CAAA,EAAIC,EAAa,CAAA,EAAI,CACvD,MAAMJ,EAAU,SAAS,cAAcE,CAAG,EAC1C,OAAIC,EAAQ,OAAS,GACnBH,EAAQ,UAAU,IAAI,GAAGG,CAAO,EAGlC,OAAO,QAAQC,CAAU,EAAE,QAAQ,CAAC,CAACC,EAAKC,CAAK,IAAM,CACnDN,EAAQ,aAAaK,EAAKC,CAAK,CAChC,CAAA,EAEMN,CACX,CACA,CC/Be,eAAeO,EAASC,EAAO,CAE5C,MAAMC,EAAe,MAAMC,EAAa,EAKlCC,EADc,OAAO,SAAS,SAAS,QAAQ,aAAc,IAAI,EACtC,MAAM,GAAG,EACpC,CAAE,OAAAC,GAAW,OAAO,SAG1B,IAAIC,EAAkB,GAClBC,EAAe,EACnB,MAAMC,EAAiB,SAAS,cAAc,IAAI,EAElDJ,EAAa,QAASK,GAAY,CAChCH,GAAmBG,EACnB,MAAMC,EAAW,SAAS,cAAc,IAAI,EAG5C,GAAI,CAACJ,EACHI,EAAS,UAAY,YAAYL,CAAM,0BACvCG,EAAe,OAAOE,CAAQ,MACzB,CACL,MAAMC,EAAgBT,EAAa,OAAQU,GAASA,EAAK,OAASN,CAAe,EAEjF,GAAIK,GAAiBA,EAAc,SAAW,EAAG,CAC/CJ,GAAgB,EAChB,MAAMM,EAAWF,EAAc,CAAC,EAE1BG,EAAQD,EAAS,UAAYA,EAAS,MACtCE,EAAc,SAAS,cAAc,GAAG,EAG9CA,EAAY,UAAY,aACxBA,EAAY,MAAQD,EACpBC,EAAY,YAAcD,EAGtBV,EAAa,SAAWG,GAC1BQ,EAAY,UAAY,UACxBA,EAAY,aAAa,eAAgB,MAAM,GAE/CA,EAAY,KAAOV,EAASC,EAI9BI,EAAS,OAAOK,CAAW,EAC3BP,EAAe,OAAOE,CAAQ,CACtC,CACA,CAGIJ,GAAmB,GACvB,CAAG,EAGD,MAAMU,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,iCACnBA,EAAO,aAAa,aAAc,aAAa,EAC/CA,EAAO,YAAYR,CAAc,EACjCP,EAAM,UAAYe,EAAO,UACzB,MAAMC,EAAchB,EAAM,iBAAiB,iBAAiB,EACxDgB,GACFA,EAAY,QAASxB,GAAY,CAC/B,IAAID,EAAYC,CAAO,EAAE,KAAM,CACrC,CAAK,CAEL","x_google_ignoreList":[0]}