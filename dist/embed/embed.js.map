{"version":3,"file":"embed.js","sources":["../../src/blocks/embed/embed.js"],"sourcesContent":["/*\n * Embed Block\n * Show videos and social posts directly on your page\n * https://www.hlx.live/developer/block-collection/embed\n * Removed the twitter, youtube ..extend the below block for extension\n */\nimport './embed.css';\n\nconst getDefaultEmbed = (url) => `<div style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;\">\n      <iframe src=\"${url.href}\" style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\" allowfullscreen=\"\"\n        scrolling=\"no\" allow=\"encrypted-media\" title=\"Content from ${url.hostname}\" loading=\"lazy\">\n      </iframe>\n    </div>`;\n\nconst embedGoogleMaps = (url) => `<div style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;\">\n      <iframe \n        src=\"${url.href}\"\n        class=\"embed-map-iframe\"\n        style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\"\n        allowfullscreen=\"\"\n        loading=\"lazy\"\n        referrerpolicy=\"no-referrer-when-downgrade\">\n      </iframe>\n    </div>`;\n\nconst embedYoutube = (url, autoplay) => {\n  const usp = new URLSearchParams(url.search);\n  const suffix = autoplay ? '&muted=1&autoplay=1' : '';\n  let vid = usp.get('v') ? encodeURIComponent(usp.get('v')) : '';\n  const embed = url.pathname;\n  if (url.origin.includes('youtu.be')) {\n    [, vid] = url.pathname.split('/');\n  }\n  const embedHTML = `<div style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;\">\n      <iframe src=\"https://www.youtube.com${vid ? `/embed/${vid}?rel=0&v=${vid}${suffix}` : embed}\" style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\" \n      allow=\"autoplay; fullscreen; picture-in-picture; encrypted-media; accelerometer; gyroscope; picture-in-picture\" allowfullscreen=\"\" scrolling=\"no\" title=\"Content from Youtube\" loading=\"lazy\"></iframe>\n    </div>`;\n  return embedHTML;\n};\n\nconst embedVimeo = (url, autoplay) => {\n  const [, video] = url.pathname.split('/');\n  const suffix = autoplay ? '?muted=1&autoplay=1' : '';\n  const embedHTML = `<div style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;\">\n      <iframe src=\"https://player.vimeo.com/video/${video}${suffix}\" \n      style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\" \n      frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen  \n      title=\"Content from Vimeo\" loading=\"lazy\"></iframe>\n    </div>`;\n  return embedHTML;\n};\n\nconst loadEmbed = async (block, link, autoplay) => {\n  if (block.classList.contains('embed-is-loaded')) {\n    return;\n  }\n\n  const EMBEDS_CONFIG = [\n    {\n      match: ['google.com/maps', 'goo.gl/maps', 'maps.app.goo.gl'],\n      embed: embedGoogleMaps,\n    },\n    {\n      match: ['youtube', 'youtu.be'],\n      embed: embedYoutube,\n    },\n    {\n      match: ['vimeo'],\n      embed: embedVimeo,\n    },\n  ];\n\n  const config = EMBEDS_CONFIG.find((e) => e.match.some((match) => link.includes(match)));\n  const url = new URL(link);\n  if (config) {\n    block.innerHTML = config.embed(url, autoplay);\n    block.classList = `block embed embed-${config.match[0]}`;\n  } else {\n    block.innerHTML = getDefaultEmbed(url);\n    block.classList = 'block embed';\n  }\n  block.classList.add('embed-is-loaded');\n};\n\nexport default async function decorate(block) {\n  const placeholder = block.querySelector('picture');\n  const link = block.querySelector('a').href;\n  block.textContent = '';\n\n  if (placeholder) {\n    const wrapper = document.createElement('div');\n    wrapper.className = 'embed-placeholder';\n    wrapper.innerHTML = '<div class=\"embed-placeholder-play\"><button type=\"button\" title=\"Play\"></button></div>';\n    wrapper.prepend(placeholder);\n    wrapper.addEventListener('click', () => {\n      loadEmbed(block, link, true);\n    });\n    block.append(wrapper);\n  } else {\n    const observer = new IntersectionObserver((entries) => {\n      if (entries.some((e) => e.isIntersecting)) {\n        observer.disconnect();\n        loadEmbed(block, link);\n      }\n    });\n    observer.observe(block);\n  }\n}\n"],"names":["getDefaultEmbed","url","embedGoogleMaps","embedYoutube","autoplay","usp","suffix","vid","embed","embedVimeo","video","loadEmbed","block","link","config","e","match","decorate","placeholder","wrapper","observer","entries"],"mappings":"AAQA,MAAMA,EAAmBC,GAAQ;AAAA,qBACZA,EAAI,IAAI;AAAA,qEACwCA,EAAI,QAAQ;AAAA;AAAA,YAI3EC,EAAmBD,GAAQ;AAAA;AAAA,eAElBA,EAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YASjBE,EAAe,CAACF,EAAKG,IAAa,CACtC,MAAMC,EAAM,IAAI,gBAAgBJ,EAAI,MAAM,EACpCK,EAASF,EAAW,sBAAwB,GAClD,IAAIG,EAAMF,EAAI,IAAI,GAAG,EAAI,mBAAmBA,EAAI,IAAI,GAAG,CAAC,EAAI,GAC5D,MAAMG,EAAQP,EAAI,SAClB,OAAIA,EAAI,OAAO,SAAS,UAAU,IAChC,CAAA,CAAGM,CAAG,EAAIN,EAAI,SAAS,MAAM,GAAG,GAEhB;AAAA,4CACwBM,EAAM,UAAUA,CAAG,YAAYA,CAAG,GAAGD,CAAM,GAAKE,CAAK;AAAA;AAAA,WAIjG,EAEMC,EAAa,CAACR,EAAKG,IAAa,CACpC,KAAM,CAAA,CAAGM,CAAK,EAAIT,EAAI,SAAS,MAAM,GAAG,EAQxC,MANkB;AAAA,oDACgCS,CAAK,GAFxCN,EAAW,sBAAwB,EAEc;AAAA;AAAA;AAAA;AAAA,WAMlE,EAEMO,EAAY,MAAOC,EAAOC,EAAMT,IAAa,CACjD,GAAIQ,EAAM,UAAU,SAAS,iBAAiB,EAC5C,OAkBF,MAAME,EAfgB,CACpB,CACE,MAAO,CAAC,kBAAmB,cAAe,iBAAiB,EAC3D,MAAOZ,CACR,EACD,CACE,MAAO,CAAC,UAAW,UAAU,EAC7B,MAAOC,CACR,EACD,CACE,MAAO,CAAC,OAAO,EACf,MAAOM,CACR,CACF,EAE4B,KAAMM,GAAMA,EAAE,MAAM,KAAMC,GAAUH,EAAK,SAASG,CAAK,CAAC,CAAC,EAChFf,EAAM,IAAI,IAAIY,CAAI,EACpBC,GACFF,EAAM,UAAYE,EAAO,MAAMb,EAAKG,CAAQ,EAC5CQ,EAAM,UAAY,qBAAqBE,EAAO,MAAM,CAAC,CAAC,KAEtDF,EAAM,UAAYZ,EAAgBC,CAAG,EACrCW,EAAM,UAAY,eAEpBA,EAAM,UAAU,IAAI,iBAAiB,CACvC,EAEe,eAAeK,EAASL,EAAO,CAC5C,MAAMM,EAAcN,EAAM,cAAc,SAAS,EAC3CC,EAAOD,EAAM,cAAc,GAAG,EAAE,KAGtC,GAFAA,EAAM,YAAc,GAEhBM,EAAa,CACf,MAAMC,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,oBACpBA,EAAQ,UAAY,yFACpBA,EAAQ,QAAQD,CAAW,EAC3BC,EAAQ,iBAAiB,QAAS,IAAM,CACtCR,EAAUC,EAAOC,EAAM,EAAI,CACjC,CAAK,EACDD,EAAM,OAAOO,CAAO,CACxB,KAAS,CACL,MAAMC,EAAW,IAAI,qBAAsBC,GAAY,CACjDA,EAAQ,KAAMN,GAAMA,EAAE,cAAc,IACtCK,EAAS,WAAY,EACrBT,EAAUC,EAAOC,CAAI,EAE7B,CAAK,EACDO,EAAS,QAAQR,CAAK,CAC1B,CACA"}